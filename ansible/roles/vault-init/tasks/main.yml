---
- name: check hashivault status
  hashivault_status:
  register: vault_status

- name: show hashivault status
  debug:
    #msg: "Seal progress is {{ vault_status.status.progress }}"
    msg: "Seal progress is {{ vault_status }}"

- name: initialize vault
  hashivault_init:
    secret_shares: 3
    secret_threshold: 3
  register: initialized
  when: vault_status.status.initialized == False

- name: show initialized variable
  debug:
    msg: "{{ initialized }}"
  when: vault_status.status.initialized == False

#- name: show initialized root token
  #debug:
    #msg: "{{ initialized.root_token }}"
#
#- name: show initialized variable first key_base64 individually
  #debug:
    #msg: "{{ initialized.keys_base64[0] }}"

- name: show initialized variable - keys
  debug:
    msg: "Key is {{ item.key}} and value is {{item.value}}"
  with_dict: "{{ initialized }}"
  when: vault_status.status.initialized == False

- name: show variable each key in keys_base64
  debug:
    msg: "{{ item }}"
  with_items: "{{ initialized.keys_base64 }}"
  when: vault_status.status.initialized == False

- name: save unseal keys locally
  copy:
    content: "{{ item.1 }}"
    dest: "/tmp/key_{{ item.0 }}"
  with_indexed_items:
    - "{{ initialized.keys_base64 }}"
  when: vault_status.status.initialized == False

- name: save root token locally
  copy:
    content: "{{ initialized.root_token }}"
    dest: "/tmp/root_token"
  when: vault_status.status.initialized == False

#
# Ignores TLS checking
#
#- name: Create unseal directories
  #file:
    #path: "{{ unseal_keys_dir_output }}"
    #state: directory
#
#- name: Create root key directories
  #file:
    #path: "{{ root_token_dir_output }}"
    #state: directory
#
#- name: check if vault is initialized
  #shell: "{{vault_bin_dir}}/vault status -tls-skip-verify -format=json | jq -r '.initialized'"
  ##shell: vault status -tls-skip-verify -format=json | jq -r '.initialized'
  #register: initialized
  #changed_when: initialized.stdout == 'false'
#
#- name: check if vault is sealed
  #shell: "{{vault_bin_dir}}/vault status -tls-skip-verify -format=json | jq -r '.sealed'"
  ##shell: vault status -tls-skip-verify -format=json | jq -r '.sealed'
  #register: sealed
  #changed_when: sealed.stdout == 'false'
#
#- name: Initialize Vault operator
  #shell: "{{vault_bin_dir}}/vault operator init -tls-skip-verify -key-shares=5 -key-threshold=3 -format json"
  ##shell: vault operator init -tls-skip-verify -key-shares=5 -key-threshold=3 -format json
  #register: vault_init_results
  #when: initialized.stdout == 'false'
#
#- name: Parse output of vault init
  #set_fact:
    #vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"
  #when: initialized.stdout == 'false'
#
#- name: Write unseal keys to files
  #copy:
    #dest: "{{ unseal_keys_dir_output }}/unseal_key_{{ item.0 }}"
    #content: "{{ item.1 }}"
  #with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  #when: initialized.stdout == 'false'
#
#- name: Write root token to file
  #copy:
    #content: "{{ vault_init_parsed.root_token }}"
    #dest: "{{root_token_dir_output}}/rootkey"
  #when: initialized.stdout == 'false'
