---
- name: initialize vault
  hashivault_init:
    #secret_shares: 5
    #secret_threshold: 3
    #stored_shares: 3
  register: initialized

- name: show initialized variable
  debug:
    msg: "{{ initialized }}"

- name: show initialized variable first key_base64 individually
  debug:
    msg: "{{ initialized.keys_base64[0] }}"

- name: show initialized variable - keys
  debug:
    msg: "Key is {{ item.key}} and value is {{item.value}}"
  with_dict: "{{ initialized }}"

- name: show variable each key in keys_base64
  debug:
    msg: "{{ item }}"
  with_items: "{{ initialized.keys_base64 }}"

- name: save unseal keys locally
  copy:
    content: "{{ item.1 }}"
    dest: "/tmp/key_{{ item.0 }}"
  with_indexed_items:
    - "{{ initialized.keys_base64 }}"

- name: retrieve unseal keys
  slurp:
    src: "{{ item }}"
  register: unseal_keys
  loop:
    - /tmp/key_0
    - /tmp/key_1
    - /tmp/key_2
    - /tmp/key_3
    - /tmp/key_4

- name: show unseal keys from file
  debug:
    msg: "{{ unseal_keys }}"

- name: show dictionary
  debug:
    msg: "{{ item }}"
  loop:
    - "{{ unseal_keys.results[0].content }}"
    - "{{ unseal_keys.results[1].content }}"
    - "{{ unseal_keys.results[2].content }}"
    - "{{ unseal_keys.results[3].content }}"
    - "{{ unseal_keys.results[4].content }}"

#- name: show dictionary
#  debug:
#    msg: "{{ unseal_keys.results[0].content }}"


#- name: show unseal keys from file
  #debug:
    #msg: "{{ unseal_keys.results[0] | type_debug }}"

#- name: retrieve unseal keys
  #slurp:
    #src: "/tmp/key_0"
  #register: unseal_keys
#
#- name: show unseal keys from file
  #debug:
    #msg: "{{ unseal_keys }}"

#
# Ignores TLS checking
#
#- name: Create unseal directories
  #file:
    #path: "{{ unseal_keys_dir_output }}"
    #state: directory
#
#- name: Create root key directories
  #file:
    #path: "{{ root_token_dir_output }}"
    #state: directory
#
#- name: check if vault is initialized
  #shell: "{{vault_bin_dir}}/vault status -tls-skip-verify -format=json | jq -r '.initialized'"
  ##shell: vault status -tls-skip-verify -format=json | jq -r '.initialized'
  #register: initialized
  #changed_when: initialized.stdout == 'false'
#
#- name: check if vault is sealed
  #shell: "{{vault_bin_dir}}/vault status -tls-skip-verify -format=json | jq -r '.sealed'"
  ##shell: vault status -tls-skip-verify -format=json | jq -r '.sealed'
  #register: sealed
  #changed_when: sealed.stdout == 'false'
#
#- name: Initialize Vault operator
  #shell: "{{vault_bin_dir}}/vault operator init -tls-skip-verify -key-shares=5 -key-threshold=3 -format json"
  ##shell: vault operator init -tls-skip-verify -key-shares=5 -key-threshold=3 -format json
  #register: vault_init_results
  #when: initialized.stdout == 'false'
#
#- name: Parse output of vault init
  #set_fact:
    #vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"
  #when: initialized.stdout == 'false'
#
#- name: Write unseal keys to files
  #copy:
    #dest: "{{ unseal_keys_dir_output }}/unseal_key_{{ item.0 }}"
    #content: "{{ item.1 }}"
  #with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  #when: initialized.stdout == 'false'
#
#- name: Write root token to file
  #copy:
    #content: "{{ vault_init_parsed.root_token }}"
    #dest: "{{root_token_dir_output}}/rootkey"
  #when: initialized.stdout == 'false'
