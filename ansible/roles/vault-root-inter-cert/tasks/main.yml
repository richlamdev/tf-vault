---
- name: retrieve root token
  slurp:
    src: "/tmp/root_token"
  register: root_token

- name: show all returned root data
  debug:
    msg: "{{ root_token['content'] | b64decode}}"

- name: Vault login
  shell: "/usr/local/bin/vault login -tls-skip-verify {{ root_token['content'] | b64decode }}"

- name: enable pki engine
  hashivault_secret_engine:
    name: pki
    backend: pki
    #config: {"default_lease_ttl": 27648000, "force_no_cache": false, "max_lease_ttl": 27648000}
    config: {"default_lease_ttl": "876000h", "force_no_cache": false, "max_lease_ttl": "876000h"}

- name: create root cert
  hashivault_pki_ca:
    common_name: my common name
    #config:
      #ttl: "876000h"
    type: exported
  register: root_cert

- name: show root_cert variable
  debug:
    msg: "{{ root_cert }}"

- name: save root_cert to disk
  copy:
    content: "{{ root_cert.data.certificate }}"
    dest: "/tmp/root_cert"

- name: save issuing_ca to disk
  copy:
    content: "{{ root_cert.data.issuing_ca }}"
    dest: "/tmp/issuing_ca"

- name: configure CA and CRL URLs
  hashivault_write:
    secret: "config/urls"
    mount_point: "pki"
    data: {"issuing_certificates":"http://10.0.2.66:8200/v1/pki/ca"}


#- name: Get unseal tokens
  #slurp:
    #src: "{{ unseal_keys_dir_output }}/unseal_key_{{ item }}"
  #register: unseal_keys
  #with_sequence: 0-4
#
##- name: show all returned token data
  ##debug:
    ##msg: "{{ item['content'] | b64decode }}"
  ##loop: '{{ unseal_keys["results"] }}'
##
##- name: show tokens only
  ##debug:
    ##msg: '{{ unseal_keys["results"][item|int]["content"] | b64decode }}'
  ##with_sequence: 0-4
#
#- name: Unseal vault with unseal keys
  #shell: "{{vault_bin_dir}}/vault operator unseal -tls-skip-verify '{{ unseal_keys['results'][item|int]['content'] | b64decode }}'"
  ##environment:
    ##VAULT_ADDR: "https://127.0.0.1:8200"
  #with_sequence: 0-4
#
#- name: Get root token
  #slurp:
    #src: "{{ root_token_dir_output }}/rootkey"
  #register: rootkey
#
##- name: show all returned root data
##  debug:
##    msg: "{{ rootkey['content'] | b64decode}}"
#
#- name: Vault login
  #shell: "{{vault_bin_dir}}/vault login -tls-skip-verify '{{ rootkey['content'] | b64decode}}'"
#
#- name: check if the PKI secrets engine is enabled
  ##shell: "{{vault_bin_dir}}/vault secrets list -tls-skip-verify -format=json | jq -r '.'pki/''"
  #shell: /usr/local/bin/vault secrets list -tls-skip-verify -format=json | jq -r '."pki/"'
  #register: pki_enabled
#
##- name: value of pki_enabled
  ##debug:
    ##msg: "{{ pki_enabled.stdout }}"
#
#- name: enable the PKI secrets engine and set TTL 87600hrs (10 years)
  #shell: |
    #/usr/local/bin/vault secrets enable -tls-skip-verify pki
    #"{{vault_bin_dir}}/vault secrets tune -tls-skip-verify -max-lease-ttl=87600h pki"
  #when: pki_enabled.stdout == 'null'
#
#- name: generate root certificate
  #shell: |
    #"{{vault_bin_dir}}/vault write -tls-skip-verify pki/root/generate/internal -field=certificate common_name='{{ca_name}} Root Authority' ttl={{root_ttl}} > {{ca_name_filename}}_CA_root_cert.crt"
    #"{{vault_bin_dir}}/vault write -tls-skip-verify pki/config/urls issuing_certificates='https://127.0.0.1:8200/v1/pki/ca' crl_distribution_points='https://127.0.0.1:8200/v1/pki/crl'"
  #when: pki_enabled.stdout == 'null'
#
#- name: enable the pki secrets engine at pki_int path, set issue cert max TTL 43800hrs (5 years)
  #shell: |
    #"{{vault_bin_dir}}/vault secrets enable -tls-skip-verify -path=pki_int pki"
    #"{{vault_bin_dir}}/vault secrets tune -tls-skip-verify -max-lease-ttl=43800h pki_int"
  #when: pki_enabled.stdout == 'null'
#
#
#- name: generate intermediate csr, sign csr by root, import back into vault
  #shell: |
    #"{{vault_bin_dir}}/vault write -tls-skip-verify -format=json pki_int/intermediate/generate/internal common_name='{{ca_name}} Intermediate Authority' | jq -r '.data.csr' > {{ca_name_filename}}_intermediate.csr"
    #"{{vault_bin_dir}}/vault write -tls-skip-verify -format=json pki/root/sign-intermediate csr=@{{ca_name_filename}}_intermediate.csr format=pem_bundle ttl={{intermediate_ttl}} | jq -r '.data.certificate' > {{ca_name_filename}}_intermediate_signed_by_root.cert.pem"
    #"{{vault_bin_dir}}/vault write -tls-skip-verify pki_int/intermediate/set-signed certificate=@{{ca_name_filename}}_intermediate_signed_by_root.cert.pem"
  #when: pki_enabled.stdout == 'null'
#
#- name: create a role
  #shell: "{{vault_bin_dir}}/vault write -tls-skip-verify pki_int/roles/{{sld}} allowed_domains={{sld}}{{tld}} allow_subdomains=true max_ttl={{role_ttl}}"
  #when: pki_enabled.stdout == 'null'
#
#- name: request a certificate for vault server
  #shell: |
    #"{{vault_bin_dir}}/vault write -tls-skip-verify -format=json pki_int/issue/{{sld}} common_name='{{vault_hostname}}.{{sld}}{{tld}}' ip_sans='192.168.60.6' ttl='43800h' > {{vault_hostname}}.json"
    #jq -r '.data.certificate,.data.issuing_ca' {{vault_hostname}}.json > {{vault_hostname}}.{{sld}}{{tld}}_cert.crt
    #jq -r '.data.private_key' {{vault_hostname}}.json > {{vault_hostname}}.{{sld}}{{tld}}_cert.key
  #when: pki_enabled.stdout == 'null'
#
#- name: replace hashicorp vault TLS certificates with new TLS certificates
  #shell: |
    #cp /home/vagrant/{{vault_hostname}}.{{sld}}{{tld}}_cert.crt /opt/vault/tls/tls.crt
    #cp /home/vagrant/{{vault_hostname}}.{{sld}}{{tld}}_cert.key /opt/vault/tls/tls.key
  #when: pki_enabled.stdout == 'null'
#
#- name: restart vault to load new certificates
  #service:
    #name: vault
    #enabled: True
    #state: restarted
  #when: pki_enabled.stdout == 'null'
#
#- name: Unseal vault with unseal keys
  #shell: "{{vault_bin_dir}}/vault operator unseal -tls-skip-verify '{{ unseal_keys['results'][item|int]['content'] | b64decode }}'"
  #with_sequence: 0-4
  #when: pki_enabled.stdout == 'null'
#
#- name: Vault login
  #shell: "{{vault_bin_dir}}/vault login -tls-skip-verify '{{ rootkey['content'] | b64decode}}'"
  #when: pki_enabled.stdout == 'null'
#
#
#- name: download root certificate to import to local browser
  #fetch:
    #src: /home/vagrant/{{ca_name_filename}}_CA_root_cert.crt
    #dest: /tmp/
    #flat: True
  #when: pki_enabled.stdout == 'null'
#
#- name: download intermediate certificate to import to local browser
  #fetch:
    #src: /home/vagrant/{{ca_name_filename}}_intermediate_signed_by_root.cert.pem
    #dest: /tmp/
    #flat: True
  #when: pki_enabled.stdout == 'null'
