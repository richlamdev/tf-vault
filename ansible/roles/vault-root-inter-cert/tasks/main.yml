---
- name: retrieve root token
  slurp:
    src: "/tmp/root_token"
  register: root_token

- name: show all returned root data
  debug:
    msg: "{{ root_token['content'] | b64decode}}"

- name: Vault login
  shell: "/usr/local/bin/vault login -tls-skip-verify {{ root_token['content'] | b64decode }}"
  #environment:
    #VAULT_ADDR: "http://{{ vault_ip }}:8200"

# These steps based on this page:
# https://learn.hashicorp.com/tutorials/vault/pki-engine

- name: enable pki engine
  hashivault_secret_engine:
    name: pki
    backend: pki
    config:
      default_lease_ttl: "876000h"
      force_no_cache: false
      max_lease_ttl: "876000h"

- name: create root cert
  hashivault_pki_ca:
    common_name: my root cert
    #config:
      #ttl: "876000h"
    type: exported
  register: root_cert

- name: show root_cert variable
  debug:
    msg: "{{ root_cert }}"
  when: root_cert.data.certificate is defined

- name: save root_cert to disk
  copy:
    content: "{{ root_cert.data.certificate }}"
    dest: "/tmp/root_cert"
  when: root_cert.data.certificate is defined

- name: save issuing_ca to disk
  copy:
    content: "{{ root_cert.data.issuing_ca }}"
    dest: "/tmp/issuing_ca"
  when: root_cert.data.issuing_ca is defined

- name: configure CA URL
  hashivault_write:
    secret: "config/urls"
    mount_point: "pki"
    data:
      issuing_certificates: "{{ vault_ip }}:8200/v1/pki/ca"

- name: configure CRL URL
  hashivault_write:
    secret: "config/urls"
    mount_point: "pki"
    data:
      crl_distribution_points: "{{ vault_ip }}:8200/v1/pki/crl"

- name: enable intermediate pki engine
  hashivault_secret_engine:
    name: int_pki
    backend: pki
    config:
      default_lease_ttl: "876000h"
      force_no_cache: false
      max_lease_ttl: "876000h"

- name: create intermediate csr
  hashivault_pki_ca:
    common_name: my intermediate cert
    config:
      ttl: "438000"
    kind: intermediate
    mount_point: "int_pki"
    type: exported
  register: intermediate_csr

- name: show intermediate_csr variable
  debug:
    msg: "{{ intermediate_csr }}"

- name: save intermediate csr to disk
  copy:
    content: "{{ intermediate_csr.data.csr }}"
    dest: "/tmp/pki_intermediate.csr"

- name: List Certificates
  hashivault_pki_cert_list:
    mount_point: "int_pki"
  register: list

- name: sign intermediate csr
  hashivault_pki_cert_sign:
    mount_point: "pki"
    csr: "{{ intermediate_csr.data.csr }}"
    common_name: my common name
    type: intermediate
  register: signed_intermediate

- name: show signed_intermediate
  debug:
    msg: "{{ signed_intermediate }}"

- name: save signed intermediate cert to disk
  copy:
    content: "{{ signed_intermediate.data.certificate }}"
    dest: "/tmp/signed_intermediate.crt"

- name: save signed intermediate issuing_ca to disk
  copy:
    content: "{{ signed_intermediate.data.issuing_ca }}"
    dest: "/tmp/signed_intermediate_issuing_ca.crt"

- name: set signed intermediate
  hashivault_pki_set_signed:
    mount_point: "int_pki"
    certificate: "{{ signed_intermediate.data.certificate }}\n{{ signed_intermediate.data.issuing_ca }}"

- name: create role
  hashivault_pki_role:
    name: "{{ sld }}"
    mount_point: "int_pki"
    config:
      #allowed_domains: ['"{{ test_domain }}"']
      allowed_domains: ["{{ test_domain }}"]
      allow_subdomains: True
      max_ttl: "40000"

- name: create test cert
  hashivault_pki_cert_issue:
    role: "{{ sld }}"
    common_name: "{{ sub_test_domain }}"
    mount_point: "int_pki"
  register: cert

- name: show test cert
  debug:
    msg: "{{ cert }}"

- name: save test cert - ca_chain
  copy:
    content: "{{ cert.data.ca_chain }}"
    dest: "/tmp/{{ sub_test_domain }}_ca_chain.crt"

- name: save test cert - certificate
  copy:
    content: "{{ cert.data.certificate }}"
    dest: "/tmp/{{ sub_test_domain }}.crt"

- name: save test cert - issuing_ca
  copy:
    content: "{{ cert.data.issuing_ca }}"
    dest: "/tmp/{{ sub_test_domain }}_issuing_ca.crt"

- name: save test cert - private key
  copy:
    content: "{{ cert.data.private_key }}"
    dest: "/tmp/{{ sub_test_domain }}.key"
